events { }

http {

    upstream auth_service {
        server herodha_auth:3000;
    }
    upstream admin_service {
        server herodha_admin:3003;
    }
    upstream stockwallet_service {
        server herodha_stockwallet:3002;
    }
    upstream trade_service {
        server herodha_trade:3001;
    }
    upstream matching_engine {
        server matching_engine:3004;
    }

    server {
        listen 8080;

        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        location /auth {
            proxy_pass http://auth_service;
            proxy_redirect off;
        }

        location /admin {
            auth_request /auth-verify;
            proxy_pass http://admin_service;
            proxy_redirect off;
            proxy_set_header Authorization $http_authorization;
            
            error_page 401 = @error401;
            error_page 403 = @error403;
        }

        location /stock {
            auth_request /auth-verify;
            proxy_pass http://stockwallet_service;
            proxy_redirect off;
            proxy_set_header Authorization $http_authorization;
            
            error_page 401 = @error401;
            error_page 403 = @error403;
        }

        location /wallet {
            auth_request /auth-verify;
            proxy_pass http://stockwallet_service;
            proxy_redirect off;
            proxy_set_header Authorization $http_authorization;
            
            error_page 401 = @error401;
            error_page 403 = @error403;
        }

        location /engine {
            proxy_pass http://matching_engine;
        }

        location /trade {
            auth_request /auth-verify;
            proxy_pass http://trade_service;
            proxy_redirect off;
            proxy_set_header Authorization $http_authorization;
            
            error_page 401 = @error401;
            error_page 403 = @error403;
        }

        location = /auth-verify {
            internal;
            proxy_pass http://auth_service/auth/verify-token;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        location @error401 {
            return 401 '{"error": "Authentication required"}';
        }

        location @error403 {
            return 403 '{"error": "Invalid token"}';
        }
    }
}